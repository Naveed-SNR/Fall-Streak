const handleSubmit = async (event) => {
  event.preventDefault();
  
  // Fetch the price for the selected package from Firestore
  const packagePrice = await fetchPrice(selectedPackage); // Implement this function to fetch price from Firestore

  // Create a Checkout Session on your server
  const response = await fetch('/create-checkout-session', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ packagePrice }),
  });

  const session = await response.json();

  // Redirect the user to Stripe Checkout
  const stripe = await stripePromise;
  const result = await stripe.redirectToCheckout({
    sessionId: session.id,
  });

  if (result.error) {
    // Handle any errors
    console.error(result.error.message);
  }
};

// Render the form with a submit button
return (
  <form onSubmit={handleSubmit}>
    {/* Other form fields */}
    <button type="submit">Pay with Stripe</button>
  </form>
);



///GPT-4 Response [Microsoft Edge T_T]

const handleBookNowClick = async (button) => {
    // Find the parent <ul> element of the clicked button
    const parentUl = button.closest("ul");
    const packageElement = parentUl.querySelector('li:first-child');
  
    setSelectedPackage(packageElement.textContent.trim());
  
    // Fetch price from Firebase Firestore
    const docRef = firestore.collection("prices").doc(selectedPackage);
    const doc = await docRef.get();
    if (!doc.exists) {
      console.log('No such document!');
    } else {
      console.log('Document data:', doc.data());
      const priceId = doc.data().priceId;
  
      // Use Stripe for payment
      const stripe = await stripePromise;
      const { error } = await stripe.redirectToCheckout({
        lineItems: [{price: priceId, quantity: 1}],
        mode: 'payment',
        successUrl: 'https://your-website.com/success',
        cancelUrl: 'https://your-website.com/cancel',
      });
  
      if (error) {
        console.warn('Error:', error);
      }
    }
  };
  